{% extends 'layout.twig' %}

{% block body %}
  <div class="uk-container uk-container-xsmall">
    <h1>{{title}}</h1>
    <p>Welcome to {{ title }}</p>
    <div class="uk-card uk-card-default uk-card-outline uk-card-small uk-border-rounded">
      <div class="uk-card-header">
        <h5>Configuration</h5>
      </div>
      <div class="uk-card-body">
        <div class="uk-inline">
          <label class="uk-text-small" for="_uid">Device ID</label>
          <select class="uk-select uk-form-small uk-border-rounded" type="text" id="_uid" onchange="login()">
            <option></option>
            <option>C1</option>
            <option>C2</option>
            <option>C3</option>
            <option>C4</option>
          </select>
        </div>



        <div class="uk-inline">
          <label class="uk-text-small" for="_device_uid">Client ID</label>
          <select class="uk-select uk-form-small uk-border-rounded" onchange="subscribe(this.value)" id="_device_uid">
            <option></option>
            <option>D1</option>
            <option>D2</option>
            <option>D3</option>
            <option>D4</option>
          </select>
        </div>
      </div>
    </div>

    {% for i in 1..4 %}
    <div class="uk-margin uk-card uk-card-default uk-card-outline uk-card-small uk-border-rounded uk-card-body">
      <div class="uk-grid" uk-grid>
        <div class="uk-width-expand">Device {{ i }}</div>
        <div>
          <input id="device_checkbox_{{ i }}" type="checkbox" value="on" onchange="set_value(this.checked?'255':'0', 'D{{ i }}')">
          <label for="device_checkbox_{{ i }}">Toggle</label>
        </div>
      </div>
    </div>
    {% endfor %}

    <div>
      <input type="color" oninput="set_value(hexToRgb(this.value), 'D1')">
    </div>
  </div>

  <script>
    var ws = null;
    function connect() {
      ws = new WebSocket(BROKER_URL);

      ws.onmessage = function(e) {
        console.log('Message:', e.data);
      };

      ws.onclose = function(e) {
        console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);
        setTimeout(function() {
          connect();
        }, 1000);
      };

      ws.onerror = function(err) {
        console.error('Socket encountered error: ', err.message, 'Closing socket');
        ws.close();
      };
    }
    connect();


    var _uid = null;
    function login(){
      _uid = document.querySelector("#_uid").value;
      if(ws==null){return}
      let _event = "login";
      let message = {
        "_uid": _uid,
        "_event": _event,
        "_value": "",
      }
      ws.send(JSON.stringify(message));
    }
    function subscribe(device_uid){
      if(ws==null){return}
      let message = {
        "_uid": _uid,
        "_event": "subscribe",
        "_value": device_uid,
      }
      ws.send(JSON.stringify(message));
    }
    function set_value(value, device_uid=null){
      if(ws==null){return}

      let message = {
        "_uid": _uid,
        "_event": "publish",
        "_payload": {
          _event: "set_value",
          _values: value
        }
      }

      if (device_uid!==null){
        message._client_uid = device_uid
      }
      ws.send(JSON.stringify(message));
    }



    function hexToRgb(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? [
        parseInt(result[1], 16),
        parseInt(result[2], 16),
        parseInt(result[3], 16)
      ] : null;
    }
  </script>

  <style>
    input[type=checkbox]{
      height: 0;
      width: 0;
      display: none;
    }

    input[type=checkbox]+label {
      cursor: pointer;
      text-indent: -9999px;
      width: 30px;
      height: 15px;
      background: grey;
      display: block;
      border-radius: 15px;
      position: relative;
    }

    input[type=checkbox]+label:after {
      content: '';
      position: absolute;
      top: 2px;
      left: 2px;
      width: 11px;
      height: 11px;
      background: #fff;
      border-radius: 11px;
      transition: 0.15s;
    }

    input[type=checkbox]:checked + label {
      background: #bada55;
    }

    input[type=checkbox]:checked + label:after {
      left: calc(100% - 1px);
      transform: translateX(-100%);
    }

    input[type=checkbox]label:active:after {
      width: 26px;
    }

  </style>
{% endblock %}
